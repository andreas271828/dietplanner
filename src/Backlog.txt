-   New algorithm / combine ideas with latest evolutionary algorithm that uses createIndividual4():
    Remove score from list, if no new ingredient could improve the score - stop when list is empty.
    Create a population of diet plans with this algorithm.
    Create a population of populations by using different start diet plans (meal templates).
    Run evolutionary algorithms on two levels and use the total score divided by the standard deviation of scores as fitness.
    Use smaller mutations (e.g. one portion more or less instead of a random amount)?
-   Make adjustments until I get a useful diet plan for myself.
    Try diet plan.
    Adjust weights and prices.
    Adjust and add meal templates.
--- POC complete: Develop business.
-   Refactor code; remove unused code; see TODOs
-   Write tests (to test correctness but also execution time; avoid randomness; e.g. calculating requirements; use JUnit?)
-   Improve optimisation algorithm:
    Most experiments haven't shown significant improvements of the scores or convergence speed.
    What could be useful, is to focus on one score in each population, rather than on the total score in all of them.
-   Create user interface
-   Improve parameterisation, calculation of criteria (consider TODOs, "Ketogenic diets and physical performance.pdf", No-Meat-Athlete-Cheat-Sheet1.jpg, http://www.ewg.org/foodnews/list.php), etc.
-   About, warnings and information (calculation of requirements / meaning of limits, only a calculator, ask a professional, use organic products and ethical sources, water, water filter, different types of fat, heating fat, cholesterol)
-   Parallel computation
