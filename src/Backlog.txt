-   With new algorithm:
    For new start diet plan, remove random ingredients (try all variable ingredients) while total score is improving.
    Vary how much of a diet plan I change. Fine-tune in local maximum, find better local maximum in region, ..., even change whole meals to different meal templates.
    Several optimisations can be run in parallel and the more successful ones get more processing power (create new ones randomly or with mating -> evolutionary algorithm).
    At the end I could remove ingredients to increase the total score at the cost of individual scores.
-   Use different star diet plans / replace whole meals during optimisation.
-   Make adjustments until I get a useful diet plan for myself.
    Try diet plan.
    Adjust weights and prices.
    Adjust and add meal templates.
--- POC complete: Develop business.
-   Refactor code; remove unused code; see TODOs
-   Write tests (to test correctness but also execution time; avoid randomness; e.g. calculating requirements; use JUnit?)
-   Improve optimisation algorithm:
    Most experiments haven't shown significant improvements of the scores or convergence speed.
    What could be useful, is to focus on one score in each population, rather than on the total score in all of them.
-   Create user interface
-   Improve parameterisation, calculation of criteria (consider TODOs, "Ketogenic diets and physical performance.pdf", No-Meat-Athlete-Cheat-Sheet1.jpg, http://www.ewg.org/foodnews/list.php), etc.
-   About, warnings and information (calculation of requirements / meaning of limits, only a calculator, ask a professional, use organic products and ethical sources, water, water filter, different types of fat, heating fat, cholesterol)
-   Parallel computation
