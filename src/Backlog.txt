-   Fine-tune latest optimisation algorithm and combine with evolution.
    Do I actually want to maximise individual scores, not the total score?
    What is better:
        a. A total score of 9.0, where 9 scores are 1.0 and 1 score is 0.0?
        b. A total score of 8.0, where all 10 scores are 0.8?
    Although in this case it's more important to improve the worst scores, other scores (the total score?) shouldn't be neglected.
    What is better:
        a. A total score of 1.2, where 1 score is 1.0 and the other score is 0.2?
        b. A total score of 0.43, where 1 score is 0.22 and the other score is 0.21?
    Vary how much of a diet plan I change. Fine-tune in local maximum, find better local maximum in region, ..., even change whole meals to different meal templates.
-   Use different star diet plans / replace whole meals during optimisation.
-   Make adjustments until I get a useful diet plan for myself.
    Try diet plan.
    Adjust weights and prices.
    Adjust and add meal templates.
--- POC complete: Develop business.
-   Refactor code; remove unused code; see TODOs
-   Write tests (to test correctness but also execution time; avoid randomness; e.g. calculating requirements; use JUnit?)
-   Improve optimisation algorithm:
    Most experiments haven't shown significant improvements of the scores or convergence speed.
    What could be useful, is to focus on one score in each population, rather than on the total score in all of them.
-   Create user interface
-   Improve parameterisation, calculation of criteria (consider TODOs, "Ketogenic diets and physical performance.pdf", No-Meat-Athlete-Cheat-Sheet1.jpg, http://www.ewg.org/foodnews/list.php), etc.
-   About, warnings and information (calculation of requirements / meaning of limits, only a calculator, ask a professional, use organic products and ethical sources, water, water filter, different types of fat, heating fat, cholesterol)
-   Parallel computation
